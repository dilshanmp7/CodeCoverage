trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName : 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -- global dotnet-reportgenerator-globaltool'

- task: DotNetCoreCLI@2
   displayName : 'Run unit Tests'
   inputs:
    command: 'test'
    arguments: '--no-build --configuration /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults:true
    projects: '**/*Tests.csproj'

-script : |
  reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName : 'Create code coverage report' 

-task : PublishCodeCoverageResults@1
 displayName: 'Publish code coverage report'
 inputs:
   codeCoverageTool:'cobertura'
   summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/AzureDevOps-CI/bin'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- script: echo All done
  displayName: 'All done'